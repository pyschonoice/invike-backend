{
  "info": {
    "name": "Invike API Collection",
    "description": "Postman collection for testing the Invike API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register Host User",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/api/auth/register/",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Host User\",\n    \"email\": \"host@example.com\",\n    \"password\": \"hostpass123\",\n    \"role\": \"HOST\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Register a new host user in the system. Hosts can create and manage events."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User registration successful\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.user).to.exist;",
                  "    pm.expect(responseJson.token).to.exist;",
                  "    pm.environment.set(\"host_token\", responseJson.token);",
                  "    pm.environment.set(\"host_id\", responseJson.user.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register Guest User",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/api/auth/register/",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Guest User\",\n    \"email\": \"guest@example.com\",\n    \"password\": \"guestpass123\",\n    \"role\": \"GUEST\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Register a new guest user in the system. Guests can RSVP to events and manage their attendance."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Guest user registration successful\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.user).to.exist;",
                  "    pm.expect(responseJson.token).to.exist;",
                  "    pm.environment.set(\"guest_token\", responseJson.token);",
                  "    pm.environment.set(\"guest_id\", responseJson.user.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login Host User",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/api/auth/login/",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"host@example.com\",\n    \"password\": \"hostpass123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Login with host user credentials to obtain an authentication token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Host login successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.token).to.exist;",
                  "    pm.environment.set(\"host_token\", responseJson.token);",
                  "    pm.environment.set(\"token\", responseJson.token); // Set as current token",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login Guest User",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/api/auth/login/",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"guest@example.com\",\n    \"password\": \"guestpass123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Login with guest user credentials to obtain an authentication token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Guest login successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.token).to.exist;",
                  "    pm.environment.set(\"guest_token\", responseJson.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Host Profile",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/auth/profile/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "description": "Retrieve the authenticated host user's profile information."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Profile retrieval successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.email).to.equal(\"host@example.com\");",
                  "    pm.expect(responseJson.role).to.equal(\"HOST\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/api/auth/token/refresh/",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Refresh an expired JWT token using the refresh token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Token refresh successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.access).to.exist;",
                  "    pm.environment.set(\"token\", responseJson.access);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Authentication endpoints for user registration, login, and token management."
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "List Events (Unauthenticated)",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/",
            "description": "List all public events. Unauthenticated users can only see public events."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthenticated list events successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.results).to.exist;",
                  "    ",
                  "    // Verify only public events are visible",
                  "    if(responseJson.results.length > 0) {",
                  "        responseJson.results.forEach(function(event) {",
                  "            pm.expect(event.privacy).to.equal('PUBLIC');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Events (Host)",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "description": "List events as a host user. Hosts can see all their own events and public events."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Authenticated list events successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.results).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Public Event",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/api/events/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Public Test Event\",\n    \"description\": \"This is a public test event\",\n    \"date\": \"2025-12-31T19:00:00Z\",\n    \"location\": \"Public Venue\",\n    \"privacy\": \"PUBLIC\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Create a new public event. Public events are visible to all users."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Create public event successful\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.equal(\"success\");",
                  "    pm.expect(responseJson.event.id).to.exist;",
                  "    pm.environment.set(\"public_event_id\", responseJson.event.id);",
                  "    pm.environment.set(\"event_id\", responseJson.event.id); // Set as current event",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Private Event",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/api/events/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Private Test Event\",\n    \"description\": \"This is a private test event\",\n    \"date\": \"2025-12-31T19:00:00Z\",\n    \"location\": \"Private Venue\",\n    \"privacy\": \"PRIVATE\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Create a new private event. Private events are only visible to the host and invited guests."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Create private event successful\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.equal(\"success\");",
                  "    pm.expect(responseJson.event.id).to.exist;",
                  "    pm.environment.set(\"private_event_id\", responseJson.event.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Filter Events by Date Range",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/events/?start_date=2025-01-01&end_date=2025-12-31",
              "host": ["{{base_url}}"],
              "path": ["api", "events", ""],
              "query": [
                {
                  "key": "start_date",
                  "value": "2025-01-01"
                },
                {
                  "key": "end_date",
                  "value": "2025-12-31"
                }
              ]
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "description": "Filter events by date range. Use query parameters start_date and end_date to specify the range."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Filter events by date successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.results).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Public Event Details (Unauthenticated)",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/{{public_event_id}}/",
            "description": "Get details of a public event without authentication."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get public event as unauthenticated user successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.title).to.equal(\"Public Test Event\");",
                  "    pm.expect(responseJson.privacy).to.equal(\"PUBLIC\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Private Event Details (Unauthenticated)",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/{{private_event_id}}/",
            "description": "Attempt to get details of a private event without authentication (should fail)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get private event as unauthenticated should fail\", function() {",
                  "    pm.response.to.have.status(404); // Should be not found",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Private Event Details (Guest User)",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/{{private_event_id}}/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{guest_token}}"
              }
            ],
            "description": "Attempt to get details of a private event as a guest user who is not invited (should fail)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get private event as guest user should fail\", function() {",
                  "    pm.response.to.have.status(404); // Should be not found",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Private Event Details (Host)",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/{{private_event_id}}/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "description": "Get details of a private event as the host who created it."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get private event as owner successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.title).to.equal(\"Private Test Event\");",
                  "    pm.expect(responseJson.privacy).to.equal(\"PRIVATE\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Event (Host)",
          "request": {
            "method": "PATCH",
            "url": "{{base_url}}/api/events/{{public_event_id}}/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Updated Event Title\",\n    \"description\": \"This event has been updated\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Update an event's details as the host who created it."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Update event as owner successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.title).to.equal(\"Updated Event Title\");",
                  "    pm.expect(responseJson.description).to.equal(\"This event has been updated\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Event (Guest User)",
          "request": {
            "method": "PATCH",
            "url": "{{base_url}}/api/events/{{public_event_id}}/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{guest_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Unauthorized Update\",\n    \"description\": \"This update should fail\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Attempt to update an event as a guest user who didn't create it (should fail)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Update event as non-owner should fail\", function() {",
                  "    pm.response.to.have.status(403); // Forbidden",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Share Event (Generate Link)",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/{{public_event_id}}/share/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "description": "Generate shareable links and QR codes for an event."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Share event successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.equal(\"success\");",
                  "    pm.expect(responseJson.sharing_options).to.exist;",
                  "    pm.expect(responseJson.sharing_options.link).to.exist;",
                  "    pm.expect(responseJson.sharing_options.qr_code_data).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Event Guest List (Host)",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/{{public_event_id}}/guests/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "description": "Get a list of all guests who have RSVP'd to an event (host only)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get guest list as host successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.equal(\"success\");",
                  "    pm.expect(responseJson.guests).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Export Guest List",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/{{public_event_id}}/export_guests/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "description": "Export the guest list as a CSV file (host only)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Export guest list successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.equal(\"success\");",
                  "    pm.expect(responseJson.download_link).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Event (Guest User)",
          "request": {
            "method": "DELETE",
            "url": "{{base_url}}/api/events/{{public_event_id}}/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{guest_token}}"
              }
            ],
            "description": "Attempt to delete an event as a guest user (should fail)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Delete event as non-owner should fail\", function() {",
                  "    pm.response.to.have.status(403); // Forbidden",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Event (Host)",
          "request": {
            "method": "DELETE",
            "url": "{{base_url}}/api/events/{{private_event_id}}/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "description": "Delete an event as the host who created it."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Delete event as owner successful\", function() {",
                  "    pm.response.to.have.status(204); // No Content",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Verify Event Deleted",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/events/{{private_event_id}}/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{host_token}}"
              }
            ],
            "description": "Verify that the event was deleted by attempting to retrieve it (should return 404)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Event should be deleted\", function() {",
                  "    pm.response.to.have.status(404); // Not Found",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Events endpoints for creating, listing, updating, and managing events."
    },
    {
      "name": "RSVP",
      "item": [
        {
          "name": "Create RSVP",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/api/rsvp/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{guest_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"event_id\": \"{{event_id}}\",\n    \"status\": \"YES\",\n    \"plus_ones\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Create a new RSVP response for an event. Status can be YES, NO, or MAYBE. Plus_ones indicates how many additional guests the user is bringing."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Create RSVP successful\", function() {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.equal(\"success\");",
                  "    pm.expect(responseJson.rsvp).to.exist;",
                  "    pm.environment.set(\"rsvp_id\", responseJson.rsvp.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get User's RSVPs",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/api/rsvp/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{guest_token}}"
              }
            ],
            "description": "Get a list of all events the user has RSVP'd to."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get user's RSVPs successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update RSVP",
          "request": {
            "method": "PATCH",
            "url": "{{base_url}}/api/rsvp/{{rsvp_id}}/",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{guest_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"MAYBE\",\n    \"plus_ones\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Update an existing RSVP response. Users can change their status or number of plus ones."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Update RSVP successful\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.equal(\"MAYBE\");",
                  "    pm.expect(responseJson.plus_ones).to.equal(1);",
                  "});"
                ],
                "type": "text/javascript" }
              }
            ]
          },
          {
            "name": "Delete RSVP",
            "request": {
              "method": "DELETE",
              "url": "{{base_url}}/api/rsvp/{{rsvp_id}}/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{guest_token}}"
                }
              ],
              "description": "Delete an RSVP response. This removes the user from the event guest list entirely."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Delete RSVP successful\", function() {",
                    "    pm.response.to.have.status(204);",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Get Event Guest List",
            "request": {
              "method": "GET",
              "url": "{{base_url}}/api/rsvp/events/{{event_id}}/guests/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "description": "Get the guest list for a specific event. For hosts, this shows all RSVPs. For guests, this shows only approved RSVPs for public events, or only approved RSVPs for private events they're part of."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Get event guest list successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.be.an('array');",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Export Event Guest List (CSV)",
            "request": {
              "method": "GET",
              "url": "{{base_url}}/api/rsvp/events/{{event_id}}/guests/export/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "description": "Export the guest list for an event as a CSV file. Only available to the event host."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Export guest list successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/csv');",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Approve RSVP (Host Only)",
            "request": {
              "method": "PATCH",
              "url": "{{base_url}}/api/rsvp/{{rsvp_id}}/approve/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "description": "Approve a guest's RSVP request. Only relevant for private events where host approval is required. Only the event host can perform this action."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Approve RSVP successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.message).to.equal(\"RSVP approved\");",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Reject RSVP (Host Only)",
            "request": {
              "method": "PATCH",
              "url": "{{base_url}}/api/rsvp/{{rsvp_id}}/reject/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "description": "Reject a guest's RSVP request. Only relevant for private events. Only the event host can perform this action."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Reject RSVP successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.message).to.equal(\"RSVP rejected\");",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          }
        ],
        "description": "RSVP endpoints for event attendance management. Users can RSVP to events, update their status, and hosts can manage the guest list."
      },
      {
        "name": "Notifications",
        "item": [
          {
            "name": "List User Notifications",
            "request": {
              "method": "GET",
              "url": "{{base_url}}/api/notifications/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "description": "Get a list of all notifications for the authenticated user. Notifications include RSVP confirmations, event updates, and host messages."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"List notifications successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.be.an('array');",
                    "    ",
                    "    if(responseJson.length > 0) {",
                    "        pm.environment.set(\"notification_id\", responseJson[0].id);",
                    "    }",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Get Unread Notification Count",
            "request": {
              "method": "GET",
              "url": "{{base_url}}/api/notifications/unread-count/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "description": "Get the count of unread notifications for the authenticated user. This is useful for displaying a notification badge in the UI."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Get unread count successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.unread_count).to.be.a('number');",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Mark Notification as Read",
            "request": {
              "method": "PATCH",
              "url": "{{base_url}}/api/notifications/{{notification_id}}/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"is_read\": true\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "Mark a specific notification as read."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Mark notification as read successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.is_read).to.be.true;",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Mark Multiple Notifications as Read",
            "request": {
              "method": "POST",
              "url": "{{base_url}}/api/notifications/mark-read/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"notification_ids\": [\"{{notification_id}}\"] \n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "Mark multiple notifications as read in a single request. Provide an array of notification IDs to mark."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Mark multiple notifications as read successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.count).to.be.a('number');",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Mark All Notifications as Read",
            "request": {
              "method": "POST",
              "url": "{{base_url}}/api/notifications/mark-all-read/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "description": "Mark all of the user's notifications as read in a single request."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Mark all notifications as read successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.count).to.be.a('number');",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Create Notification (Host Only)",
            "request": {
              "method": "POST",
              "url": "{{base_url}}/api/notifications/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"user_ids\": [\"{{guest_id}}\"],\n    \"event_id\": \"{{event_id}}\",\n    \"type\": \"HOST_MESSAGE\",\n    \"title\": \"Important Update\",\n    \"message\": \"The event has been moved to a new venue.\",\n    \"action_link\": \"/events/{{event_id}}\",\n    \"action_text\": \"View Event\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "Create a custom notification to send to guests. Only available to event hosts."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Create notification successful\", function() {",
                    "    pm.response.to.have.status(201);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.message).to.equal(\"Notifications sent successfully\");",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Filter Notifications by Type",
            "request": {
              "method": "GET",
              "url": {
                "raw": "{{base_url}}/api/notifications/?type=RSVP_CONFIRMATION",
                "host": ["{{base_url}}"],
                "path": ["api", "notifications", ""],
                "query": [
                  {
                    "key": "type",
                    "value": "RSVP_CONFIRMATION"
                  }
                ]
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "description": "Filter notifications by type. Available types include RSVP_CONFIRMATION, RSVP_UPDATE, EVENT_REMINDER, HOST_MESSAGE, etc."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Filter notifications by type successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.be.an('array');",
                    "    ",
                    "    if(responseJson.length > 0) {",
                    "        responseJson.forEach(function(notification) {",
                    "            pm.expect(notification.type).to.equal(\"RSVP_CONFIRMATION\");",
                    "        });",
                    "    }",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          }
        ],
        "description": "Notification endpoints for managing user notifications. Notifications are generated automatically when users interact with events and RSVPs."
      },

      
      {
        "name": "Payments",
        "item": [
          {
            "name": "Add Payment Link",
            "request": {
              "method": "POST",
              "url": "{{base_url}}/api/payments/add-link/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"event_id\": \"{{event_id}}\",\n    \"payment_link\": \"https://upi.example.com/pay/test123\",\n    \"amount\": \"500.00\",\n    \"description\": \"Event contribution\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "Add a payment link to an event. This allows the host to collect payments through external payment services like UPI, Paytm, or GPay."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Add payment link successful\", function() {",
                    "    pm.response.to.have.status(201);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.payment).to.exist;",
                    "    pm.environment.set(\"payment_id\", responseJson.payment.id);",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Confirm Payment",
            "request": {
              "method": "POST",
              "url": "{{base_url}}/api/payments/confirm/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{guest_token}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"event_id\": \"{{event_id}}\",\n    \"status\": \"PAID\",\n    \"confirmation_notes\": \"Paid via UPI\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "Confirm that a payment has been made. This is used by guests to manually confirm their payments after paying through an external payment service."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Confirm payment successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.payment).to.exist;",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Get Event Payment Status",
            "request": {
              "method": "GET",
              "url": {
                "raw": "{{base_url}}/api/payments/event-status/?event_id={{event_id}}",
                "host": ["{{base_url}}"],
                "path": ["api", "payments", "event-status", ""],
                "query": [
                  {
                    "key": "event_id",
                    "value": "{{event_id}}"
                  }
                ]
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "description": "Get the payment status for all guests of an event. Shows payment links, confirmation counts, and payment status."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Get payment status successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.has_payment_link).to.be.a('boolean');",
                    "    pm.expect(responseJson.confirmed_payments).to.be.a('number');",
                    "    pm.expect(responseJson.pending_payments).to.be.a('number');",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Update Payment Status (Host Only)",
            "request": {
              "method": "PATCH",
              "url": "{{base_url}}/api/payments/{{payment_id}}/update-status/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"status\": \"PAID\",\n    \"confirmation_notes\": \"Manually verified by host\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "Update the status of a payment. Only the event host can perform this action."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Update payment status successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.payment.status).to.equal(\"PAID\");",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "List All Payments (Host)",
            "request": {
              "method": "GET",
              "url": "{{base_url}}/api/payments/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "description": "List all payments. Hosts can see all payments for their events."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"List payments successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.results).to.exist;",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "List User Payments (Guest)",
            "request": {
              "method": "GET",
              "url": "{{base_url}}/api/payments/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{guest_token}}"
                }
              ],
              "description": "List all payments for the authenticated user. Guests can only see their own payments."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"List user payments successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.results).to.exist;",
                    "    ",
                    "    if(responseJson.results.length > 0) {",
                    "        responseJson.results.forEach(function(payment) {",
                    "            pm.expect(payment.user.id).to.equal(pm.environment.get(\"guest_id\"));",
                    "        });",
                    "    }",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Filter Payments by Event",
            "request": {
              "method": "GET",
              "url": {
                "raw": "{{base_url}}/api/payments/?event_id={{event_id}}",
                "host": ["{{base_url}}"],
                "path": ["api", "payments", ""],
                "query": [
                  {
                    "key": "event_id",
                    "value": "{{event_id}}"
                  }
                ]
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "description": "Filter payments by event ID. Only accessible by the event host."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Filter payments by event successful\", function() {",
                    "    pm.response.to.have.status(200);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.results).to.exist;",
                    "    ",
                    "    if(responseJson.results.length > 0) {",
                    "        responseJson.results.forEach(function(payment) {",
                    "            pm.expect(payment.event.id).to.equal(pm.environment.get(\"event_id\"));",
                    "        });",
                    "    }",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          },
          {
            "name": "Create Event with Payment Link",
            "request": {
              "method": "POST",
              "url": "{{base_url}}/api/events/",
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{host_token}}"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n    \"title\": \"Event with Payment\",\n    \"description\": \"This event includes a payment link\",\n    \"date\": \"2025-12-31T19:00:00Z\",\n    \"location\": \"Event Venue\",\n    \"privacy\": \"PUBLIC\",\n    \"payment_link\": \"https://upi.example.com/pay/event123\",\n    \"payment_amount\": \"1000.00\",\n    \"payment_description\": \"Event ticket fee\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "Create a new event with a payment link in one step."
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "exec": [
                    "pm.test(\"Create event with payment link successful\", function() {",
                    "    pm.response.to.have.status(201);",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.status).to.equal(\"success\");",
                    "    pm.expect(responseJson.event.id).to.exist;",
                    "    pm.expect(responseJson.event.payment_information).to.exist;",
                    "    pm.expect(responseJson.event.payment_information.has_payment).to.be.true;",
                    "});"
                  ],
                  "type": "text/javascript"
                }
              }
            ]
          }
        ],
        "description": "Payment endpoints for managing event payments. The system supports manual payment confirmations through external payment services like UPI, Paytm, and GPay."
      }
    ],
    "variable": [
      {
        "key": "base_url",
        "value": "http://localhost:8000"
      },
      {
        "key": "token",
        "value": "your_jwt_token_here"
      },
      {
        "key": "host_token",
        "value": "host_jwt_token_here"
      },
      {
        "key": "guest_token",
        "value": "guest_jwt_token_here"
      },
      {
        "key": "refresh_token",
        "value": "your_refresh_token_here"
      },
      {
        "key": "event_id",
        "value": "event_uuid_here"
      },
      {
        "key": "public_event_id",
        "value": "public_event_uuid_here"
      },
      {
        "key": "private_event_id",
        "value": "private_event_uuid_here"
      },
      {
        "key": "user_id",
        "value": "user_uuid_here"
      },
      {
        "key": "host_id",
        "value": "host_uuid_here"
      },
      {
        "key": "guest_id",
        "value": "guest_uuid_here"
      },
      {
        "key": "rsvp_id",
        "value": "rsvp_uuid_here"
      },
      {
        "key": "notification_id",
        "value": "notification_uuid_here"
      },
      {
        "key": "payment_id",
        "value": "payment_uuid_here"
      }
    ]
  }